"""MNIST_InceptionResNetV2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LKkJYI1wnl0SgC71610FUK2HxcXvnFo4
"""

import tensorflow as tf
tf.test.gpu_device_name()

import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import keras
import tensorflow.keras.layers as Layers
import tensorflow.keras.activations as Actications
import tensorflow.keras.models as Models
import tensorflow.keras.optimizers as Optimizer
import tensorflow.keras.metrics as Metrics
import tensorflow.keras.utils as Utils
from tensorflow.keras.callbacks import ReduceLROnPlateau , EarlyStopping
from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train = pd.read_csv("digit-recognizer/train.csv")
# test = pd.read_csv("test.csv")

train.head()

X = (train.drop(columns=['label'],axis=1).values / 255.0).reshape(-1,28,28)
y = train['label']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)
X_train.shape , X_test.shape

#convert data to rgb
X_train=tf.image.grayscale_to_rgb(tf.expand_dims(X_train, axis=3)) 
X_test=tf.image.grayscale_to_rgb(tf.expand_dims(X_test, axis=3))

#resize to minimum size of (32x32)
X_train=tf.image.resize_with_pad(X_train,32,32)
X_test=tf.image.resize_with_pad(X_test,32,32)

y_train=keras.utils.to_categorical(y_train,num_classes=10)
y_test=keras.utils.to_categorical(y_test,num_classes=10)



"""# Inception"""
print("\n")
print("--------------------------------- InceptionResNetV2 Model ---------------------------------")
inceptionModel = tf.keras.applications.InceptionResNetV2(input_shape=(75,75,3),weights='imagenet', include_top=False)

#freeze the first 3 blocks
for layer in inceptionModel.layers[:11]:
    layer.trainable = False

top_model = inceptionModel.output
top_model = Layers.Flatten()(top_model)
top_model = Layers.Dense(512, activation='relu')(top_model)
top_model = Layers.Dropout(0.5)(top_model)
top_model = Layers.Dense(64, activation='relu')(top_model)
top_model = Layers.Dropout(0.2)(top_model)

output_layer = Layers.Dense(10, activation='softmax')(top_model)

inceptionModel = Models.Model(inputs=inceptionModel.input, outputs=output_layer)
inceptionModel.summary()

#resize to minimum size of (32x32)
X_train=tf.image.resize_with_pad(X_train,75,75)
X_test=tf.image.resize_with_pad(X_test,75,75)

"""## Adagrad"""
print("\n")
print("--------------------------------- InceptionResNetV2 Model with Adagrad Optimizer---------------------------------")

from keras import callbacks

beta1 = 0.9
beta2 = 0.99
epsilonE = 1e-06
earlystopping = callbacks.EarlyStopping(monitor ="val_loss", 
                                        mode ="min", patience = 3, 
                                        restore_best_weights = True)
incada = inceptionModel
adagrad1 = tf.keras.optimizers.Adagrad(
    learning_rate = 0.001,
    initial_accumulator_value = 0.1,
    epsilon = epsilonE,
)
incada.compile(optimizer = adagrad1, loss = "categorical_crossentropy", metrics=["accuracy"])
incadahis = incada.fit(X_train,y_train,validation_split=0.3,epochs=50,callbacks=[earlystopping],batch_size=128)
incadaval=incada.evaluate(X_test, y_test)
print("\n")
print("InceptionResNetV2 Model - Adagrad Optimizer Accuracy - ", incadaval[1]*100)
incadaval
incada.save("mnist_models/inceptionada_model.h5")












"""## Adam"""
print("\n")
print("--------------------------------- InceptionResNetV2 Model with Adam Optimizer---------------------------------")

incadam = inceptionModel
adam1 = tf.keras.optimizers.Adam(
    learning_rate = 0.001,
    beta_1 = beta1,
    beta_2 = beta2,
    epsilon = epsilonE,
    amsgrad=False,
 
)
incadam.compile(optimizer = adam1, loss = "categorical_crossentropy", metrics=["accuracy"])
incadamhis = incadam.fit(X_train,y_train,validation_split=0.3,epochs=50,callbacks=[earlystopping],batch_size=128)
incadamval=incadam.evaluate(X_test, y_test)
print("\n")
print("InceptionResNetV2 Model - Adam Optimizer Accuracy - ", incadamval[1]*100)
incadamval
incadam.save("mnist_models/inceptionadam_model.h5")



"""## Rmsprop"""
print("\n")
print("--------------------------------- InceptionResNetV2 Model with RMSProp Optimizer---------------------------------")
# RMSProp
# RMSProp
incrms = inceptionModel
rmsprop1 = tf.keras.optimizers.RMSprop(
    learning_rate = 0.001,
    rho = 0.9,
    momentum = 0.0,
    epsilon = epsilonE,
    centered=False,
)
incrms.compile(optimizer = rmsprop1, loss = "categorical_crossentropy", metrics=["accuracy"])
incrmshis = incrms.fit(X_train,y_train,validation_split=0.3,epochs=50,callbacks=[earlystopping],batch_size=128)
incrmsval=incrms.evaluate(X_test, y_test)
print("\n")
print("InceptionResNetV2 Model - RMSProp Optimizer Accuracy - ", incrmsval[1]*100)
incrmsval
incrms.save("mnist_models/inceptionrms_model.h5")


"""## SGD"""
print("\n")
print("--------------------------------- InceptionResNetV2 Model with SGD Optimizer---------------------------------")

incsgd= inceptionModel
momentum1 = tf.keras.optimizers.SGD(
    learning_rate = 0.01,
    momentum = beta1,
    nesterov = False,
)

incsgd.compile(optimizer = momentum1, loss = "categorical_crossentropy", metrics=["accuracy"])
incsgdhis = incsgd.fit(X_train,y_train,validation_split=0.3,epochs=50,callbacks=[earlystopping],batch_size=128)
incsgdval=incsgd.evaluate(X_test, y_test)
print("\n")
print("InceptionResNetV2 Model - SGD Optimizer Accuracy - ", incsgdval[1]*100)
incsgdval
incsgd.save("mnist_models/inceptionsgd_model.h5")



import seaborn as sns
classifiers = [incadaval , incadamval ,incrmsval ,incsgdval]
cv_results_res = []
for i in classifiers :
    cv_results_res.append(i[1])
cv_results_res = pd.DataFrame({"Evaluate":cv_results_res,"Network":["xcepAdam","xcepAdagrad","xcepRMS",
"xcepSGD"]})

cv_results_res

# use seaborn to create a barplot
sns.set(style="whitegrid")
ax = sns.barplot(x="Network", y="Evaluate", data=cv_results_res)

ax.set_title("Evaluation Scores for Different Optimizers for InceptionResNetV2")
ax.set_xlabel("Network")
ax.set_ylabel("Accuracy")

# display the plot
plt.savefig("outputs/mnistDataset/inceptionresnet50_evaluation_scores.png")
plt.show()

# Plot training & validation loss values
plt.plot(incadamhis.history['loss'])
plt.plot(incadahis.history['loss'])
plt.plot(incrmshis.history['loss'])
plt.plot(incsgdhis.history['loss'])
plt.title('InceptionResNetV2 Model Training Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Adam', 'Adagrad','RMSprop','SGD'], loc='upper right')
plt.savefig("outputs/mnistDataset/inceptionresnet50_training_loss.png")
plt.show()

# Plot training & validation loss values
plt.plot(incadamhis.history['val_loss'])
plt.plot(incadahis.history['val_loss'])
plt.plot(incrmshis.history['val_loss'])
plt.plot(incsgdhis.history['val_loss'])
plt.title('InceptionResNetV2 Model Validation Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Adam', 'Adagrad','RMSprop','SGD'], loc='upper right')
plt.savefig("outputs/mnistDataset/inceptionresnet50_validation_loss.png")
plt.show()

# Plot training & validation loss values
plt.plot(incadamhis.history['accuracy'])
plt.plot(incadahis.history['accuracy'])
plt.plot(incrmshis.history['accuracy'])
plt.plot(incsgdhis.history['accuracy'])
plt.title('InceptionResNetV2 Model Training Accuracy')
plt.ylabel('accuracy')
plt.xlabel('Epoch')
plt.legend(['Adam', 'Adagrad','RMSprop','SGD'], loc='lower right')
plt.savefig("outputs/mnistDataset/inceptionresnet50_training_accuracy.png")
plt.show()

# Plot training & validation loss values
plt.plot(incadamhis.history['val_accuracy'])
plt.plot(incadahis.history['val_accuracy'])
plt.plot(incrmshis.history['val_accuracy'])
plt.plot(incsgdhis.history['val_accuracy'])
plt.title('InceptionResNetV2 Model Validation Accuracy')
plt.ylabel('accuracy')
plt.xlabel('Epoch')
plt.legend(['Adam', 'Adagrad','RMSprop','SGD'], loc='lower right')
plt.savefig("outputs/mnistDataset/inceptionresnet50_validation_accuracy.png")
plt.show()

import seaborn as sns
import pandas as pd
optimizer =['Adam', 'Adagrad','RMSprop','SGD']
histories =[incadamhis,incadahis,incrmshis,incsgdhis]
# Get the validation accuracies for each optimizer
acc_data = []
for i in range(len(optimizer)):
    acc = histories[i].history['val_accuracy']
    acc_data.append(pd.DataFrame({'Optimizer': str(optimizer[i]), 'Accuracy': acc}))

# Concatenate the dataframes and draw the density plot
acc_df = pd.concat(acc_data)
sns.kdeplot(data=acc_df, x='Accuracy', hue='Optimizer', fill=True)

acc_data=[]
for i in range(len(optimizer)):
    acc = histories[i].history['val_accuracy']
    acc_data.append(acc)
  
fig, ax = plt.subplots()
ax.boxplot(acc_data, labels=[str(i) for i in optimizer])
ax.set_ylabel('Accuracy')
ax.set_xlabel('Optimizers')
ax.set_title('InceptionResNetV2 Model - Validation Accuracy by Optimizer')
plt.savefig("outputs/mnistDataset/inceptionresnet50_val_acc_whiskerplot.png")
plt.show()

